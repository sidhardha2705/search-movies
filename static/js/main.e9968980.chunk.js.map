{"version":3,"sources":["apollo/queries/queries.js","assets/Spinner.svg","components/ui-components/loading-animation.js","components/templates/single-movie.js","contexts/contexts.js","components/ui-components/movie-card.js","components/ui-components/movies-container.js","components/logical-components/popular-movies.js","components/logical-components/search-movies.js","components/templates/homepage.js","theme/theme.js","App.js","apollo/apolloClient.js","index.js"],"names":["movieTypeForList","SEARCH_MOVIES","gql","FETCH_POPULAR_MOVIES","FETCH_SINGLE_MOVIE","useStyles","makeStyles","image","width","height","container","textAlign","LoadingAnimation","classes","className","alt","src","Spinner","root","display","justifyContent","detailsContainer","padding","link","textDecoration","color","actionContainer","marginBottom","SingleMovie","match","useQuery","variables","id","params","loading","error","data","movies","movie","title","poster","overview","rating","releaseDate","to","Button","variant","startIcon","Typography","gutterBottom","Date","getFullYear","Rating","readOnly","defaultValue","max","cookies","Cookies","ViewedMoviesContext","createContext","ViewedMovies","children","existingCookieData","get","useState","viewedMovies","setViewedMovies","Provider","value","movieId","filtered","includes","filter","set","MovieCard","viewed","onClick","theme","position","maxWidth","margin","media","top","left","transform","zIndex","tint","backgroundColor","colors","bottom","right","Card","CardActionArea","CardMedia","flexGrow","paper","spacing","palette","text","secondary","GridContainer","Grid","React","Children","map","child","item","xs","sm","PopularMovies","useContext","updateViewedMovies","popular","edges","node","resultsContainer","minHeight","SearchMovies","input","setInput","useLazyQuery","searchForMovie","useEffect","timeoutId","setTimeout","term","clearInterval","TextField","autoFocus","onChange","e","target","label","type","search","length","__typename","HomePage","createTheme","breakpoints","values","md","lg","xl","primary","App","ThemeProvider","Container","exact","path","component","client","ApolloClient","cache","InMemoryCache","uri","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.e9968980.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nconst movieTypeForList = `\r\n  id\r\n  title\r\n  poster(size: W342)\r\n  rating\r\n`;\r\n\r\nexport const SEARCH_MOVIES = gql`\r\n  query SearchMovies($term: String!) {\r\n    search(term: $term, first: 20) {\r\n      edges {\r\n        node {\r\n          ... on Movie {\r\n           ${movieTypeForList}\r\n           \r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const FETCH_POPULAR_MOVIES = gql`\r\n  {\r\n    movies {\r\n      popular(first: 10) {\r\n        edges {\r\n          node {\r\n            ${movieTypeForList}\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const FETCH_SINGLE_MOVIE = gql`\r\n  query FetchSingleMovie($id: String!) {\r\n    movies {\r\n      movie(id: $id) {\r\n        title\r\n        id\r\n        poster(size: W500)\r\n        rating\r\n        releaseDate\r\n        overview\r\n        rating\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/Spinner.255ff8bc.svg\";","import { makeStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Spinner from \"../../assets/Spinner.svg\";\r\n\r\nconst useStyles = makeStyles({\r\n  image: {\r\n    width: 75,\r\n    height: 75,\r\n  },\r\n  container: {\r\n    textAlign: \"center\",\r\n    width: \"100%\",\r\n  },\r\n});\r\n\r\nconst LoadingAnimation = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.container}>\r\n      <img className={classes.image} alt=\"Loaing\" src={Spinner} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingAnimation;\r\n","import { useQuery } from \"@apollo/client\";\r\nimport { Button, makeStyles, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport { FETCH_SINGLE_MOVIE } from \"../../apollo/queries/queries\";\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport { Link } from \"react-router-dom\";\r\nimport LoadingAnimation from \"../ui-components/loading-animation\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  detailsContainer: {\r\n    padding: \"1.5rem\",\r\n    textAlign: \"left\",\r\n  },\r\n  link: {\r\n    textDecoration: \"none\",\r\n    color: \"inherit\",\r\n  },\r\n  actionContainer: {\r\n    textAlign: \"left\",\r\n    marginBottom: \"2rem\",\r\n  },\r\n});\r\n\r\nconst SingleMovie = ({ match }) => {\r\n  const { loading, error, data } = useQuery(FETCH_SINGLE_MOVIE, {\r\n    variables: {\r\n      id: match.params.id,\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n\r\n  if (loading) return <LoadingAnimation />;\r\n  if (error) return <div>There was an error fetching this movie</div>;\r\n\r\n  const { title, poster, overview, rating, releaseDate } = data.movies.movie;\r\n  return (\r\n    <>\r\n      <div className={classes.actionContainer}>\r\n        <Link className={classes.link} to=\"/\">\r\n          <Button variant=\"outlined\" startIcon={<ArrowBackIosIcon />}>\r\n            Go back\r\n          </Button>\r\n        </Link>\r\n      </div>\r\n      <div className={classes.root}>\r\n        <img className={classes.poster} src={poster} alt={title} />\r\n        <div className={classes.detailsContainer}>\r\n          <Typography variant=\"h4\" gutterBottom>\r\n            {title}\r\n          </Typography>\r\n          <Typography variant=\"h6\">\r\n            {new Date(releaseDate).getFullYear()}\r\n          </Typography>\r\n          <Rating readOnly defaultValue={rating} max={10} />\r\n          <Typography variant=\"body1\" gutterBottom>\r\n            {overview}\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleMovie;\r\n","import { createContext, useState } from \"react\";\r\nimport Cookies from \"universal-cookie\";\r\n\r\nconst cookies = new Cookies();\r\n\r\n//Context to provide which movies are clicked (to set transparency of the movie card)\r\nexport const ViewedMoviesContext = createContext([]);\r\n\r\nconst ViewedMovies = ({ children }) => {\r\n  const existingCookieData = cookies.get(\"viewed_movies\");\r\n  const [viewedMovies, setViewedMovies] = useState(\r\n    existingCookieData ? existingCookieData : []\r\n  );\r\n\r\n  //Sets the viewed movies array into cookies as well as updates the context\r\n  const updateViewedMovies = (movieId) => {\r\n    const filtered = viewedMovies.includes(movieId)\r\n      ? viewedMovies.filter((id) => id !== movieId)\r\n      : [...viewedMovies, movieId];\r\n    cookies.set(\"viewed_movies\", filtered);\r\n    setViewedMovies(filtered);\r\n  };\r\n\r\n  return (\r\n    <ViewedMoviesContext.Provider value={[viewedMovies, updateViewedMovies]}>\r\n      {children}\r\n    </ViewedMoviesContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ViewedMovies;\r\n","import {\r\n  Card,\r\n  CardActionArea,\r\n  CardMedia,\r\n  Typography,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MovieCard = ({ id, poster, title, viewed, onClick }) => {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      position: \"relative\",\r\n      maxWidth: 200,\r\n      textDecoration: \"none\",\r\n      margin: \"auto\",\r\n    },\r\n    media: {\r\n      height: 250,\r\n    },\r\n    link: {\r\n      textDecoration: \"none\",\r\n    },\r\n    title: {\r\n      position: \"absolute\",\r\n      top: \"80%\",\r\n      left: \"50%\",\r\n      width: \"100%\",\r\n      transform: \"translate(-50%, -50%)\",\r\n      color: \"white\",\r\n      zIndex: \"2\",\r\n    },\r\n    tint: {\r\n      position: \"absolute\",\r\n      backgroundColor: theme.colors.tint[viewed ? \"secondary\" : \"primary\"],\r\n      top: \"0\",\r\n      left: \"0\",\r\n      bottom: \"0\",\r\n      right: \"0\",\r\n      zIndex: \"1\",\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n  return (\r\n    <Link onClick={onClick} key={id} className={classes.link} to={`/${id}`}>\r\n      <Card className={classes.root}>\r\n        <CardActionArea>\r\n          <CardMedia className={classes.media} image={poster} title={title} />\r\n          <Typography className={classes.title} gutterBottom variant=\"h6\">\r\n            {title}\r\n          </Typography>\r\n          <div className={classes.tint}>&nbsp;</div>\r\n        </CardActionArea>\r\n      </Card>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default MovieCard;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nexport default function GridContainer({ children }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        {React.Children.map(children, (child) => {\r\n          if (child) {\r\n            return (\r\n              <Grid className={classes.child} item xs={6} sm={3}>\r\n                {child}\r\n              </Grid>\r\n            );\r\n          }\r\n        })}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import { useQuery } from \"@apollo/client\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport React, { useContext } from \"react\";\r\nimport { FETCH_POPULAR_MOVIES } from \"../../apollo/queries/queries\";\r\nimport { ViewedMoviesContext } from \"../../contexts/contexts\";\r\nimport LoadingAnimation from \"../ui-components/loading-animation\";\r\nimport MovieCard from \"../ui-components/movie-card\";\r\nimport GridContainer from \"../ui-components/movies-container\";\r\n\r\nconst PopularMovies = () => {\r\n  const { loading, error, data } = useQuery(FETCH_POPULAR_MOVIES);\r\n  const [viewedMovies, updateViewedMovies] = useContext(ViewedMoviesContext);\r\n\r\n  const moviesMapper = () => {\r\n    return data.movies.popular.edges.map(({ node }) => (\r\n      <MovieCard\r\n        key={node.id}\r\n        id={node.id}\r\n        poster={node.poster}\r\n        title={node.title}\r\n        onClick={() => updateViewedMovies(node.id)}\r\n        viewed={viewedMovies.includes(node.id)}\r\n      />\r\n    ));\r\n  };\r\n\r\n  if (loading) return <LoadingAnimation />;\r\n  if (error) return <div>Error fetching popular movies</div>;\r\n  return (\r\n    <>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Popular movies right now\r\n      </Typography>\r\n      <GridContainer>{moviesMapper()}</GridContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PopularMovies;\r\n","import { useLazyQuery } from \"@apollo/client\";\r\nimport { TextField, Typography } from \"@material-ui/core\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { SEARCH_MOVIES } from \"../../apollo/queries/queries\";\r\nimport { ViewedMoviesContext } from \"../../contexts/contexts\";\r\nimport MovieCard from \"../ui-components/movie-card\";\r\nimport GridContainer from \"../ui-components/movies-container\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport LoadingAnimation from \"../ui-components/loading-animation\";\r\n\r\nconst useStyles = makeStyles({\r\n  resultsContainer: {\r\n    minHeight: \"30rem\",\r\n    margin: \"2rem auto\",\r\n  },\r\n  error: {\r\n    color: \"red\",\r\n  },\r\n});\r\n\r\nconst SearchMovies = () => {\r\n  const [input, setInput] = useState(\"\");\r\n  const [searchForMovie, { loading, data }] = useLazyQuery(SEARCH_MOVIES);\r\n  const [viewedMovies, updateViewedMovies] = useContext(ViewedMoviesContext);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    //Debounce functionality, which delays the query call (the query will be triggered after 800ms when user stops typing)\r\n    const delayedHandleChange = (e) => {\r\n      searchForMovie({\r\n        variables: {\r\n          term: e,\r\n        },\r\n      });\r\n    };\r\n    const timeoutId = setTimeout(() => {\r\n      delayedHandleChange(input);\r\n    }, 800);\r\n\r\n    return () => clearInterval(timeoutId);\r\n  }, [input, searchForMovie]);\r\n\r\n  const searchResultsMapper = () => {\r\n    if (loading && input.length > 0) return <LoadingAnimation />;\r\n\r\n    return (\r\n      <GridContainer>\r\n        {data?.search.edges.map(({ node }) => {\r\n          return node.__typename === \"Movie\" ? (\r\n            <MovieCard\r\n              key={node.id}\r\n              id={node.id}\r\n              poster={node.poster}\r\n              title={node.title}\r\n              viewed={viewedMovies.includes(node.id)}\r\n              onClick={() => updateViewedMovies(node.id)}\r\n            />\r\n          ) : null;\r\n        })}\r\n      </GridContainer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Start searching for a movie\r\n      </Typography>\r\n      <TextField\r\n        autoFocus\r\n        onChange={(e) => setInput(e.target.value)}\r\n        label=\"Search movies\"\r\n        type=\"search\"\r\n        variant=\"outlined\"\r\n      />\r\n      <div className={classes.resultsContainer}>\r\n        {data?.search.edges.length === 0 ? (\r\n          <Typography className={classes.error} variant=\"body2\">\r\n            No results found, try modifying the search-term!\r\n          </Typography>\r\n        ) : (\r\n          searchResultsMapper()\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchMovies;\r\n","import React from \"react\";\r\nimport PopularMovies from \"../logical-components/popular-movies\";\r\nimport SearchMovies from \"../logical-components/search-movies\";\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <>\r\n      <SearchMovies />\r\n      <PopularMovies />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import { createTheme } from \"@material-ui/core\";\r\n\r\n//overrids default breakpoints where the grid breaks\r\nconst theme = createTheme({\r\n  breakpoints: {\r\n    values: {\r\n      xs: 0,\r\n      sm: 700,\r\n      md: 1060,\r\n      lg: 1380,\r\n      xl: 1920,\r\n    },\r\n  },\r\n  colors: {\r\n    tint: {\r\n      primary: \"#00000099\",\r\n      secondary: \"#000000e0\",\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SingleMovie from \"./components/templates/single-movie\";\nimport HomePage from \"./components/templates/homepage\";\nimport ViewedMovies from \"./contexts/contexts\";\nimport { Container, ThemeProvider } from \"@material-ui/core\";\nimport theme from \"./theme/theme\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <ViewedMovies>\n          <ThemeProvider theme={theme}>\n            <Container maxWidth=\"md\">\n              <Switch>\n                <Route exact path=\"/:id\" component={SingleMovie} />\n                <Route exact path=\"/\" component={HomePage} />\n              </Switch>\n            </Container>\n          </ThemeProvider>\n        </ViewedMovies>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ApolloClient, InMemoryCache } from \"@apollo/client\";\r\n\r\nexport const client = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  uri: \"https://tmdb.apps.quintero.io/\",\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { client } from \"./apollo/apolloClient\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}